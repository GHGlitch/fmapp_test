<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_lsmcb_fm.FMParkingUtils</api_name>
        <client_callable>false</client_callable>
        <description>Utils for the parking reservations.</description>
        <name>FMParkingUtils</name>
        <script><![CDATA[var FMParkingUtils = Class.create();
FMParkingUtils.prototype = {
	initialize: function() {},
	
	dtu: new FMDateTimeUtils(),
	
	/*
 	* Returns encoded query for fetching available parking lots given a location and time interval
 	* when updating a visit record
 	*/
	getAvailableParkingLotUpdate: function(location, type, startTime, endTime) {
		
		var start = new GlideDateTime();
		start.setDisplayValue(startTime);
		var end = new GlideDateTime();
		end.setDisplayValue(endTime);
		
		return this.getAvailableParkingLotForm(location, type, start, end);
		
	},
	
	//returns enconded query for fetching available parking lots given a location and a time interval.
	getAvailableParkingLot: function(location, type, rsrvdate, stH, stM, endH, endM, pReservation) {
		
		var gdts = new GlideDateTime();
		gdts.setDisplayValue(rsrvdate + ' ' + stH + ':' + stM + ':00');
		
		var gdte = new GlideDateTime();
		gdte.setDisplayValue(rsrvdate + ' ' + endH + ':' + endM + ':00');
		
		gdts.addSeconds(-15 * 60);
		gdte.addSeconds(15 * 60);
		
		var result = [];
		
		var m2mGr = new GlideRecord('x_lsmcb_fm_m2m_locations_parking_lots');
		m2mGr.addQuery('location', location);
		m2mGr.addQuery('parking_lot.type', type);
		m2mGr.query();
		
		while (m2mGr.next()) {
			
			if (this.checkAvailability(m2mGr.parking_lot, gdts, gdte, pReservation) == 'true') {
				result.push(m2mGr.getValue('parking_lot'));
			}
		}
		return 'sys_idIN' + result.join(',');
	},
	
	//returns enconded query for fetching available parking lots given a location and a time interval.
	getAvailableParkingLotForm: function(location, type, startTimef, endTimef) {
		
		var startTime = new GlideDateTime();
		var endTime = new GlideDateTime();
		startTime.setValue(startTimef);
		endTime.setValue(endTimef);
		
		var gdts = new GlideDateTime();
		gdts.setDisplayValue(startTime.getDisplayValue());
		
		var gdte = new GlideDateTime();
		gdte.setDisplayValue(endTime.getDisplayValue());
				gdts.addSeconds(-15 * 60);
				gdte.addSeconds(15 * 60);
		var result = [];
		
		
		var m2mGr = new GlideRecord('x_lsmcb_fm_m2m_locations_parking_lots');
		m2mGr.addQuery('location', location);
		if (type != 'all') m2mGr.addQuery('parking_lot.type', type);
			m2mGr.query();
		
		while (m2mGr.next()) {
			
			if (this.checkAvailability(m2mGr.parking_lot, gdts, gdte, '0') == 'true') {
				result.push(m2mGr.getValue('parking_lot'));
			}
		}
		return 'sys_idIN' + result.join(',');
	},
	
	//Gets available parking lots for a set of 15 minutes timepoints, given a reservation start and end time.
	checkAvailability: function(parkingLot, gdtsg, gdteg, pReservation) {

		if (parkingLot.total_visitor_spaces == 0) {
			return 'false';
		}
		
		var gdts = new GlideDateTime();
		gdts.setValue(gdtsg);
		var gdte = new GlideDateTime();
		gdte.setValue(gdteg);
		
		while (gdts <= gdte) {
			var parkedCars = 0;
			var rgr = new GlideRecord('x_lsmcb_fm_parking_reservation');
			rgr.addQuery('parking_lot', parkingLot);
			rgr.addQuery('state', '!=', 'Canceled');
			rgr.addQuery('state', '!=', 'Checked-Out');
			rgr.addQuery('sys_id', '!=', pReservation);
			rgr.addQuery('end_time', '>=', gdts);
			rgr.addQuery('start_time', '<=', gdte);
			rgr.query();
			
			while (rgr.next()) {
				var stR = new GlideDateTime();
				stR.setValue(rgr.start_time);
				var endR = new GlideDateTime(rgr.end_time);
				endR.setValue(rgr.end_time);
				
				if (gdts > stR && gdts < endR) {
					parkedCars += parseInt(rgr.getValue("quantity"));
				}

				if (parkedCars >= parkingLot.total_visitor_spaces) {
					return 'false';
				}
				
			}
			gdts.addSeconds(15 * 60);
		}
		return 'true';
		
	},
	
	//returns list of locations with parking lots associated
	getValidLocations: function() {
		
		var result = [];
		
		var floor = new GlideRecord('cmn_location');
		floor.addJoinQuery('x_lsmcb_fm_m2m_locations_parking_lots', 'sys_id', 'location');
		
		floor.query();
		
		while (floor.next()) {
			result.push(floor.sys_id.toString());
		}
		
		//gs.info('INSIDE GLIDE: ' + result.toString());
		return 'sys_idIN' + result.join(',');
	},
	
	//Populates the parking Lot availability table
	getParkingAvailability: function(lot, date) {
		
		var answer = [];
		var registered = {
			name: gs.getMessage('fm_registered'),
			times: []
		};
		var checkedIn = {
			name: gs.getMessage('fm_checkedin'),
			times: []
		};
		var available = {
			name: gs.getMessage('fm_available'),
			times: []
		};
		var timeAv;
		
		
		var time = new GlideTime();
		time.setValue('08:00:00');
		var timeLimit = new GlideTime();
		timeLimit.setValue('20:00:00');
		
		var lotGr = new GlideRecord('x_lsmcb_fm_parking_lot');
		lotGr.get(lot);
		
		while (time <= timeLimit) {
			
			var registeredn;
			var chekedInn;
			var availablen;
			var registerednn = 0;
			var chekedInnn = 0;
			
			var preserv = new GlideRecord('x_lsmcb_fm_parking_reservation');
			preserv.addQuery('parking_lot', lot);
			var timeDay = new GlideDateTime();
			timeDay.setValue(date);
			timeDay.subtract(timeDay.getLocalTime());
			timeDay.add(time);
			preserv.addQuery('state', '!=', 'Canceled');
			preserv.addQuery('start_time', '<=', timeDay);
			preserv.addQuery('end_time', '>', timeDay);
			preserv.query();
			while (preserv.next()) {
				
				if (preserv.state == 'Registered') {
					registerednn += parseInt(preserv.getValue("quantity"));
				} else if (preserv.state == 'Checked-In' || preserv.state == 'Overdue') {
					registerednn += parseInt(preserv.getValue("quantity"));
					chekedInnn += parseInt(preserv.getValue("quantity"));
				}
			}
			registeredn = {
				name: time.getByFormat('HH:mm').toString(),
				value: parseInt(registerednn)
			};
			chekedInn = {
				name: time.getByFormat('HH:mm').toString(),
				value: parseInt(chekedInnn)
			};
			availablen = {
				name: time.getByFormat('HH:mm').toString(),
				value: parseInt(lotGr.total_visitor_spaces) - parseInt(registerednn)
			};
			registered.times.push(registeredn);
			checkedIn.times.push(chekedInn);
			available.times.push(availablen);
			
			time.add(15 * 60 * 1000);
		}
		answer.push(registered);
		answer.push(checkedIn);
		answer.push(available);
		return JSON.stringify(answer);
		
	},
	
	//Returns the available parking spots for a given time
	isReservable: function(parkingReservation) {
		
		var grItem = new GlideRecord("x_lsmcb_fm_parking_lot");
		grItem.get('sys_id', parkingReservation.parking_lot_sys_id);
		
		var gdts = new GlideDateTime();
		gdts.setDisplayValue(parkingReservation.start_time);
		var gdte = new GlideDateTime();
		gdte.setDisplayValue(parkingReservation.end_time);
		
		var maxQuantity = parseInt(grItem.total_visitor_spaces);
		var availableQuantity;
		
		while (gdts <= gdte) {
			
			availableQuantity = 0;
			
			var gdtsQ = new GlideDateTime();
			gdtsQ.setValue(gdts);
			var gdteQ = new GlideDateTime();
			gdteQ.setValue(gdte);
			
			var reservedItems = 0;
			var rgr = new GlideRecord("x_lsmcb_fm_parking_reservation");
			rgr.addQuery("parking_lot", grItem.getUniqueValue());
			rgr.addQuery('state', '!=', 'Canceled');
			rgr.addQuery('state', '!=', 'Checked-Out');
			rgr.addQuery("start_time", "<=", gdteQ);
			rgr.addQuery("end_time", ">=", gdtsQ);
			rgr.addQuery('sys_id', '!=', parkingReservation.sys_id);
			rgr.query();
			
			while (rgr.next()) {
				
				var stR = new GlideDateTime();
				stR.setValue(rgr.start_time);
				var endR = new GlideDateTime(rgr.end_time);
				endR.setValue(rgr.end_time);
				
				if (gdts > stR && gdts < endR) {
					reservedItems += parseInt(rgr.getValue('quantity'));
				}
			}
			availableQuantity = parseInt(grItem.total_visitor_spaces) - reservedItems;
			
			if (availableQuantity < maxQuantity) {
				maxQuantity = availableQuantity;
			}
			gdts.addSeconds(15 * 60);
		}
		return maxQuantity;
	},
	type: 'FMParkingUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>david.neves</sys_created_by>
        <sys_created_on>2016-08-29 12:54:56</sys_created_on>
        <sys_id>b89e53950fe9a24011bec3ace1050e69</sys_id>
        <sys_mod_count>140</sys_mod_count>
        <sys_name>FMParkingUtils</sys_name>
        <sys_package display_value="Facility Management Accelerator" source="x_lsmcb_fm">e080882f0f9d224011bec3ace1050ee5</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Facility Management Accelerator">e080882f0f9d224011bec3ace1050ee5</sys_scope>
        <sys_update_name>sys_script_include_b89e53950fe9a24011bec3ace1050e69</sys_update_name>
        <sys_updated_by>david.neves</sys_updated_by>
        <sys_updated_on>2017-12-12 11:30:11</sys_updated_on>
    </sys_script_include>
</record_update>
